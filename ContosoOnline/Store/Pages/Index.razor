@page "/"
@using Google.Protobuf.WellKnownTypes;
@using Grpc.Net.Client;
@using Products;
@inject Products.ProductsClient _productsClient;
@inject OrderServiceClient _orderClient;

<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Contoso Online</MudText>
<MudText Class="mb-8">Welcome to Contoso Online</MudText>
<MudText Class="m-5">Below you will find all of the products currently in stock. Use the "Order" button below to add it to your cart, then click the "Submit Order" button to send the order to us to fulfill it.</MudText>

<MudTable Items="_products" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" T="Product">
    <HeaderContent>
        <MudTh>Product</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>In Stock?</MudTh>
        <MudTh>Order</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Price</MudTd>
        <MudTd>@context.ItemsInStock</MudTd>
        <MudTd>
            @if(!_cart.Any(x => x.ProductId == context.ProductId))
            {
                <MudButton Style="width: 200px;" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => AddToCart(context))">Add to Cart</MudButton>
            }
            else
            {
                <MudButton Style="width: 200px;" Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => AddToCart(context))">@(_cart.First(x => x.ProductId == context.ProductId).Quantity) in cart</MudButton>
            }
        </MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTd>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => SubmitOrder())">Submit Order</MudButton>
        </MudTd>
    </FooterContent>
</MudTable>

@code
{
    private List<Product> _products = new List<Product>();
    private List<CartItem> _cart = new List<CartItem>();
    private bool _shouldRender;

    override protected bool ShouldRender() => _shouldRender;

    override protected async Task OnInitializedAsync()
    {
        await GetProducts();
        _shouldRender = true;
    }

    protected async Task GetProducts()
    {
        var reply = await _productsClient.GetProductsAsync(new Empty());
        var products = reply.Products.ToList();
        foreach (var item in products)
        {
            if (!_products.Any(p => p.ProductId == item.ProductId))
            {
                _products.Add(item);
            }
        }
    }

    protected void AddToCart(Product product)
    {
        if(!_cart.Any(x => x.ProductId == product.ProductId))
        {
            _cart.Add(new CartItem(product.ProductId) { Quantity = 1});
        }
        else
        {
            _cart.First(x => x.ProductId == product.ProductId).Quantity++;
        }

        StateHasChanged();
    }

    protected async Task SubmitOrder()
    {
        var result = await _orderClient.SubmitNewOrder(_cart.ToArray());
        _cart.Clear();
        await GetProducts();
        StateHasChanged();
    }
} 